# Copyright (C) 2022 Justin Schuh <code@justinschuh.com>
#
# This file may be distributed under the terms of the GNU GPLv3 license.

[gcode_macro _load_unload]
gcode:
  {% set saved_extruder = printer.toolhead.extruder %}
  {% set EXTRUDER = params.EXTRUDER|default(saved_extruder)|lower %}
  {% set TARGET = params.TARGET|default(printer[EXTRUDER].target) %}
  {% if TARGET < printer.configfile.settings[EXTRUDER].min_extrude_temp %}
    { action_raise_error("Extrude below minimum temp") }
  {% elif printer.idle_timeout.state == "Printing" and
     not printer.pause_resume.is_paused %}
    { action_raise_error("Command not valid during printing.") }
  {% endif %}
  {% set km = printer["gcode_macro _km_globals"] %}
  {% set priming_length = km.load_priming_length %}
  {% set LENGTH = params.LENGTH|default(km.load_length)|float - priming_length%}
  {% if LENGTH < 0 %}
    {% set priming_length = (priming_length + LENGTH, 0)|max %}
    {% set LENGTH = 0 %}
  {% endif %}
  SAVE_GCODE_STATE NAME=_LOAD_UNLOAD
  {% if EXTRUDER != saved_extruder%}
    ACTIVATE_EXTRUDER EXTRUDER={EXTRUDER}
  {% endif %}
  M109 S{TARGET}
  M83
  {% if params.LOAD|int %}
    G1 E{LENGTH} F{km.load_speed}
    G4 S1
    G1 E{priming_length} F{km.load_priming_speed}
    G1 E{printer["gcode_macro resume"].saved_e} F{km.load_priming_speed}
  {% else %}
    G1 E3.0 F{km.load_speed}
    G4 S1
    G1 E{'%.4f' % -priming_length} F{km.load_priming_speed}
    G1 E{'%.4f' % -LENGTH} F{km.load_speed}
  {% endif %}
  M400
  RESTORE_GCODE_STATE NAME=_LOAD_UNLOAD

[gcode_macro load_filament]
description: Loads filament to the extruder.
  Usage: LOAD_FILAMENT [TARGET=<temperature>] [LENGTH=<distance>]
                       [EXTRUDER=<extruder>]
gcode:
  {% set extruder = printer["extruder" ~ params.T]
     if params.T|default(0)|int != 0 else printer.toolhead.extruder %}
  _LOAD_UNLOAD LOAD=1 EXTRUDER={extruder}{% for k in params|reject("==", "T")
    %}{" " ~ k ~ "=" ~ params[k]}{% endfor %}

[gcode_macro unload_filament]
description: Unloads filament from the extruder.
  Usage: UNLOAD_FILAMENT [TARGET=<temperature>] [LENGTH=<distance>]
                         [EXTRUDER=<extruder>]
gcode:
  {% set extruder = printer["extruder" ~ params.T]
     if params.T|default(0)|int != 0 else printer.toolhead.extruder %}
  _LOAD_UNLOAD LOAD=0 EXTRUDER={extruder}{% for k in params|reject("==", "T")
    %}{" " ~ k ~ "=" ~ params[k]}{% endfor %}

[gcode_macro _lift_m700]
gcode:
  {% if printer.toolhead.homed_axes != 'xyz' %}
    { action_raise_error("Must home axis first.") }
  {% endif %}
  SAVE_GCODE_STATE NAME=_LIFT_M700
  G91
  G0 Z{params.Z}
  RESTORE_GCODE_STATE NAME=_LIFT_M700

[gcode_macro m701]
description: Loads filament to the extruder.
  Usage: M701 L<distance> [Z<pos>] [T<extruder>]
gcode:
  {% if 'Z' in params %}_LIFT_M700 Z={params.Z}{%endif%}
  LOAD_FILAMENT LENGTH={params.L
    }{% if not printer[printer.toolhead.extruder].can_extrude %} TARGET={
      printer.configfile.settings[extruder].min_extrude_temp
    }{% endif %}

[gcode_macro m702]
description: Unloads filament from the extruder.
  Usage: M701 L<distance> [Z<pos>] [T<extruder>]
gcode:
  {% if 'Z' in params %}_LIFT_M700 Z={params.Z}{%endif%}
  UNLOAD_FILAMENT LENGTH={params.U
    }{% if not printer[printer.toolhead.extruder].can_extrude %} TARGET={
      printer.configfile.settings[extruder].min_extrude_temp
    }{% endif %}
